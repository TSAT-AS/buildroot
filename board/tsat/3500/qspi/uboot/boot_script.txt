# set LEDs
i2c dev 1
i2c mw 20 6 0
i2c mw 20 7 0

# define boot selector constants
setexpr boot_selector_a_value 0xaa
setexpr boot_selector_b_value ${boot_selector_a_value} ^ 0xff

# read boot selector and counter
setenv boot_selector_addr 0x2000000
setenv boot_counter_addr 0x2000001
setenv boot_selector_offset 0x540000
setenv boot_counter_offset 0x580000
sf read ${boot_selector_addr} ${boot_selector_offset} 1
sf read ${boot_counter_addr} ${boot_counter_offset} 1

setexpr boot_counter_limit 5
setexpr.b boot_selector *${boot_selector_addr}
setexpr.b boot_counter *${boot_counter_addr}

if itest.b ${boot_counter} -lt ${boot_counter_limit}; then
  echo "boot count: ${boot_counter}"
  setexpr boot_counter ${boot_counter} + 1
else
  echo "boot count exceeded"
  setexpr boot_counter 0

  # flip boot selector
  setexpr boot_selector ${boot_selector} ^ 0xff
  mw.b ${boot_selector_addr} ${boot_selector} 1
  sf update ${boot_selector_addr} ${boot_selector_offset} 1
fi

# write boot counter
mw.b ${boot_counter_addr} ${boot_counter} 1
sf update ${boot_counter_addr} ${boot_counter_offset} 1

if itest.b ${boot_selector} -eq ${boot_selector_a_value}; then
  echo "BOOT SELECTOR ${boot_selector} => BOOT A"
  setenv bootargs ${tsat_def_args} rootwait copy=A
  sf read ${tsat_kernel_loadaddr} ${tsat_qspi_kernel_offset_a} ${tsat_qspi_kernel_size}
else
  echo "BOOT SELECTOR ${boot_selector} => BOOT B"
  setenv bootargs ${tsat_def_args} rootwait copy=B
  sf read ${tsat_kernel_loadaddr} ${tsat_qspi_kernel_offset_b} ${tsat_qspi_kernel_size}
fi

bootm ${tsat_kernel_loadaddr}
